#python范例代码
#温度转换TempConvert.py
TempStr = input("请输入带有符号的温度值: ")
if TempStr[-1] in ['F', 'f']:
	C = (eval(TempStr[0:-1]) - 32)/1.8
	print("转换后的温度是{:.2f}C".format(C))
elif TempStr[-1] in ['C', 'c']:
	F = 1.8*eval(TempStr[0:-1]) + 32
	print("转换后的温度是{:.2f}F".format(F))
else:
	print("输入格式错误")

----------------------------------------------------------------------

#蟒蛇绘制PythonDraw.py
import turtle
turtle.setup(650, 350, 200, 200)
turtle.penup()
turtle.fd(-250)
turtle.pendown()
turtle.pensize(25)
turtle.pencolor("purple")
turtle.seth(-40)
for i in range(4):
	turtle.circle(40, 80)
	turtle.circle(-40, 80)
turtle.circle(40, 80/2)
turtle.fd(40)
turtle.circle(16, 180)
turtle.fd(40 * 2/3)
turtle.done()

---------------------------------------------------------------------------
#天天向上的力量DayDayUpQ4.py
def dayUP(df):
	dayup = 1
	for i in range(365):
		if i % 7 in [0,6]:
			dayup = dayup * (1 - 0.01)
		else:
			dayup = dayup * (1 + df)
	return dayup
dayfactor = 0.01
while dayUP(dayfactor) < 37.78:
	dayfactor += 0.001
print('工作日的努力参数是：{:.3f}'.format(dayfactor))

-----------------------------------------------------------------------------
#文本进度条TextProBarV3.py
import time
scale = 50
print("执行开始".center(scale//2,"-"))
start = time.perf_counter()
for i in range(scale+1):
    a = "*" * i
    b = "." * (scale - i)
    c = (i/scale)*100
    dur = time.perf_counter() - start
    print("\r{:^3.0f}%[{}->{}]{:.2f}s".format(c,a,b,dur),end = "")
    time.sleep(0.1)
print("\n"+"执行结束".center(scale//2,"-"))

----------------------------------------------------------------------------
#体脂指数的计算CalBMIv3.py
height, weight = eval(input("请输入身高(米)和体重(公斤)[逗号隔开]: "))
bmi = weight / pow(height, 2)
print("BMI 数值为：{:.2f}".format(bmi))
who, nat = "", ""
if bmi < 18.5:
    who, nat = "偏瘦", "偏瘦"
elif 18.5 <= bmi < 24:
    who, nat = "正常", "正常"
elif 24 <= bmi < 25:
    who, nat = "正常", "偏胖"
elif 25 <= bmi < 28:
    who, nat = "偏胖", "偏胖"
elif 28 <= bmi < 30:
    who, nat = "偏胖", "肥胖"
else:
    who, nat = "肥胖", "肥胖"
print("BMI 指标为:国际'{0}', 国内'{1}'".format(who, nat))

-----------------------------------------------------------------------------------
#圆周率的计算-公式法CalPiV1.py
pi = 0
N = 100
for k in range(N):
    pi += 1/pow(16,k)*( \
              4/(8*k+1) - 2/(8*k+4) - \
              1/(8*k+5) - 1/(8*k+6) ) 
print("圆周率值是: {}".format(pi))

---------------------------------------------------------------------------------
#CalPiV2.py圆周率的计算蒙特卡洛法
from random import random
from time import perf_counter
DARTS = 1000*1000
hits = 0.0
start = perf_counter()
for i in range(1, DARTS+1):
    x, y = random(), random()
    dist = pow(x ** 2 + y ** 2, 0.5)
    if dist <= 1.0:
        hits = hits + 1
pi = 4 * (hits/DARTS)
print("圆周率值是: {}".format(pi))
print("运行时间是: {:.5f}s".format(perf_counter() - start))

-----------------------------------------------------------------------------------
#SevenDigitsDrawV1七段数码管绘制
import turtle,time
def drawGap():
	turtle.penup()
	turtle.fd(5)
def drawLine(draw):
	drawGap()
	turtle.pendown() if draw else turtle.penup()
	turtle.fd(40)
	drawGap()
	turtle.right(90)
def drawDigit(digit):
	drawLine(True) if digit in [2,3,4,5,6,8,9] else drawLine(False)
	drawLine(True) if digit in [0,1,3,4,5,6,7,8,9] else drawLine(False)
	drawLine(True) if digit in [0,2,3,5,6,8,9] else drawLine(False)
	drawLine(True) if digit in [0,2,6,8] else drawLine(False)
	turtle.left(90)
	drawLine(True) if digit in [0,4,5,6,8,9] else drawLine(False)
	drawLine(True) if digit in [0,2,3,5,6,7,8,9] else drawLine(False)
	drawLine(True) if digit in [0,1,2,3,4,7,8,9] else drawLine(False)
	turtle.left(180)
	turtle.penup()
	turtle.fd(20)
def drawDate(date):
	turtle.pencolor("red")
	for i in date:
		if i == '-':
			turtle.write('年',font=("Arial",18,"normal"))
			turtle.pencolor("green")
			turtle.fd(60)
		elif i == '=':
			turtle.write('月',font=("Arial",18,"normal"))
			turtle.pencolor("blue")
			turtle.fd(60)
		elif i == '+':
			turtle.write('日',font=("Arial",18,"normal"))
		else:
			drawDigit(eval(i))
def main():
	turtle.setup(1000,500,200,200)
	turtle.penup()
	turtle.fd(-350)
	turtle.pensize(5)
	drawDate(time.strftime("%Y-%m=%d+",time.gmtime()))
	turtle.hideturtle()
	turtle.done()
main()

-------------------------------------------------------------------------------------
# N阶科赫雪花绘制
import turtle
level = 0#level设为全局变量放在main()外面，这样的话就可以用try中的输入去修改
def koch(size, n):
    if n == 0:
        turtle.fd(size)
    else:
        for angle in [0,60,-120,60]:
            turtle.left(angle)
            koch(size/3,n-1)
def main(level):#主函数是程序会执行的函数体，这里的参数需要有其实际的值
    turtle.setup(600,600)
    turtle.penup()
    turtle.goto(-200, 100)
    turtle.pendown()
    turtle.pensize(2)
    koch(400,level)
    turtle.right(120)
    koch(400,level)
    turtle.right(120)
    koch(400,level)
    turtle.hideturtle()
    turtle.done()
try:
    level = eval(input("请输入科赫曲线的阶: "))
    main(level)
except:
    print("输入错误")

-----------------------------------------------------------------------------------------
"""
货币转换：人民币和美元间汇率固定为：1美元 = 6.78人民币。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
程序可以接受人民币或美元输入，转换为美元或人民币输出。人民币采用RMB表示，美元USD表示，符号和数值之间没有空格。
"""
CurStr = input()
if CurStr[:3] == "RMB":
    print("USD{:.2f}".format(eval(CurStr[3:])/6.78))
elif CurStr[:3] in ['USD']:
    print("RMB{:.2f}".format(eval(CurStr[3:])*6.78))

------------------------------------------------------------------------------------------
"""
IntegersFormConvert整数的文字表示
获得用户输入的一个正整数输入，输出该数字对应的中文字符表示。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬0到9对应的中文字符分别是：零一二三四五六七八九
我想的是先获得input数的位数，对每个数位进行转换，
"""
chinese = {
1:'一',
2:'二',
3:'三',
4:'四',
5:'五',
6:'六',
7:'七',
8:'八',
9:'九',
0:'零'
}
Number = input("请输入一个正整数：")
a = len(Number)
for i in range(a):
	print(chinese[eval(Number[i])],end='')

#参考代码：
template = "零一二三四五六七八九"

s = input()
for c in s:
    print(template[eval(c)], end="")

---------------------------------------------------------------------------------------------
"""
BasicComputing四则运算
用户输入带有一个符号的字符串，可能包含一个或多个空格，要求计算出结果
例如“2835   908    -89 3”

"""
Computing = input("请输入运算式：")
Computing1 = Computing.replace(' ','')
if '+' in Computing1:
    i = Computing1.find('+') # 下标为i的位是OP
    M = eval(Computing1[0:i])
    N = eval(Computing1[i+1:])
    print(M + N)
if '-' in Computing1:
    i = Computing1.find('-') # 下标为i的位是OP
    M = eval(Computing1[0:i])
    N = eval(Computing1[i+1:])
    print(M - N)
if '*' in Computing1:
    i = Computing1.find('*') # 下标为i的位是OP
    M = eval(Computing1[0:i])
    N = eval(Computing1[i+1:])
    print(M * N)
if '/' in Computing1:
    i = Computing1.find('/') # 下标为i的位是OP
    M = eval(Computing1[0:i])
    N = eval(Computing1[i+1:])
    print(M / N)
-------------------------------------------------------------------------------------------------
"""
turtle工具绘制风车-1
"""
import turtle as t
t.setup(500,500)
t.pensize(2)
t.pencolor("black")
t.penup()
t.goto(0,150)
t.pendown()
t.circle(-150,-45)
t.penup()
t.goto(150,0)
t.seth(-90)
t.pendown()
t.circle(-150,-45)
t.penup()
t.goto(0,-150)
t.seth(-180)
t.pendown()
t.circle(-150,-45)
t.penup()
t.goto(-150,0)
t.seth(90)
t.pendown()
t.circle(-150,-45)
t.penup()
t.goto(0,0)
t.pendown()
for i in range(8):
    t.fd(150)
    t.penup()
    t.goto(0,0)
    t.left(45)
    t.pendown()
t.done()

# Turtle绘制风车-2
import turtle as t
t.setup(500,500)
t.pensize(2)
t.pencolor("black")
t.seth(45)
for i in range(4):
    t.fd(150)
    t.left(90)
    t.circle(150,45)
    t.left(90)
    t.fd(150)
    t.right(135)
t.done()

#WindWheel参考代码
import turtle as t
t.pensize(2)
for i in range(4):
    t.seth(90*i)
    t.fd(150)
    t.right(90)
    t.circle(-150, 45)
    t.goto(0,0)
t.done()

-------------------------------------------------------------------------------------------
"""
三次方格式化
输入一个数字，计算其三次方的值，如果少于20位，居中输出，其余位置用“-”占位，如果多于20位，则直接输出结果
"""
a = input("请输入一个数字")
b = pow(eval(a),3)
if len(str(b)) <= 20:
    print("{:-^20}".format(b))
if len(str(b)) > 20:
    print(b)

#参考代码
a = eval(input())
print("{:-^20}".format(pow(a, 3)))
-------------------------------------------------------------------------------------------
"""
星号三角
读入一个整数N，N是奇数，输出由星号字符组成的等边三角形，要求：‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
第1行1个星号，第2行3个星号，第3行5个星号，依次类推，最后一行共N的星号。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬
"""
N = input("请输入一个奇数：")
L = int((eval(N)+1)/2)
for i in range(1,L+1):
    pic = (2*i-1)*'*'
    print(pic.center(int(N),' '))

#参考代码
n = eval(input())
for i in range(1,n+1,2):
    print("{0:^{1}}".format('*'*i, n))
#关键是对.format()中槽机制的理解，槽中可以嵌套槽，用来表示宽度、填充等含义；
#此处的0为format中的第一个参数，1为format中的第二个参数，{1}在这里将被输入的n代替起到格式化字符宽度的作用，
#例如，输入15，相当于规定了每行*的输出宽度为15，即print({0:^15})
-------------------------------------------------------------------------------------------
#凯撒密码，为一段输入加密翻译为向后移动的3位A→D，Z→C
p = input("请输入一句话：")
a = len(p)
for i in range(a):
    if ord(p[i]) in range(65,91):
        c = (ord(p[i])-65+3) % 26 +65
        print(chr(c),end = '')
    elif ord(p[i]) in range(97,123):
        c = (ord(p[i])-97+3) % 26 +97
        print(chr(c),end = '')
    else:
        print(p[i],end = '')

#参考代码
s = input()
t = ""
for c in s:
    if 'a' <= c <= 'z': 
        t += chr( ord('a') + ((ord(c)-ord('a')) + 3 )%26 )
    elif 'A' <= c <= 'Z':
        t += chr( ord('A') + ((ord(c)-ord('A')) + 3 )%26 )
    else:
        t += c
print(t)
-------------------------------------------------------------------------------------------
"""
计算1-2+3-4...966，代码1：
"""
a = 0
for i in range(1,967):
    if i%2 != 0:
        a = a+i
    else:
        a = a-i
print(a)

#代码2：
a = 0
for i in range(1,966,2):
    a = a+i
for j in range(2,967,2):
    a = a-j
print(a)

#参考代码
s = 0
count = 1
while count <=966:
    if count%2 == 0:
        s -= count
    else:
        s += count
    count += 1
print(s)
--------------------------------------------------------------------------------------------------
#输出所有的三位水仙花数
Num = []
for i in range(100,1000):
    a = i//100
    b = (i-a*100)//10
    c = i-a*100-b*10
    if pow(a,3)+pow(b,3)+pow(c,3) == i:
        Num.append(str(i))
print(",".join(Num))

#参考代码
s = ""
for i in range(100, 1000):
    t = str(i)
    if pow(eval(t[0]),3) + pow(eval(t[1]),3) + pow(eval(t[2]),3) == i :
        s += "{},".format(i)#熟悉槽机制，功能很大
print(s[:-1])
#这里采用了s[:-1]方式不输出最后一个逗号。也可以把所有结果放到一个列表中，采用字符串的.join()方法输出结果。
--------------------------------------------------------------------------------------------------
"""
四位玫瑰数是4位数的自幂数。自幂数是指一个 n 位数，它的每个位上的数字的 n 次幂之和等于它本身。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬

例如：当n为3时，有1^3 + 5^3 + 3^3 = 153，153即是n为3时的一个自幂数，3位数的自幂数被称为水仙花数。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬

请输出所有4位数的四位玫瑰数，按照从小到大顺序，每个数字一行。
"""
for i in range(1000,10000):
    a = i//1000
    b = (i-a*1000)//100
    c = (i-a*1000-b*100)//10
    d = i-a*1000-b*100-c*10
    if pow(a,4)+pow(b,4)+pow(c,4)+pow(d,4)==i:
        print(i)
#参考代码
s = ""
for i in range(1000, 10000):
    t = str(i)
    if pow(eval(t[0]),4) + pow(eval(t[1]),4) + pow(eval(t[2]),4) + pow(eval(t[3]),4) == i :
        print(i)

#用str()和eval()来灵活选出想要的数
--------------------------------------------------------------------------------------------------
"""
给用户三次输入用户名和密码的机会，要求如下：‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬

1）如输入第一行输入用户名为‘Kate’,第二行输入密码为‘666666’，输出‘登录成功！’，退出程序；‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬

2）当一共有3次输入用户名或密码不正确输出“3次用户名或者密码均有误！退出程序。”。
"""
i = 3
while i > 0:
    a = input("请输入用户名：")
    b = input("请输入密码：")
    if a == "Kate" and b == "666666":
        print("登录成功！")
        break
    else:
        i = i-1
else:
    print("3次用户名或者密码均有误！退出程序。")


#参考代码：
count = 0
while count < 3:
    name = input()
    password = input()
    if name == 'Kate'and password == '666666':
        print("登录成功！")
        break
    else:
        count += 1
        if count == 3:
            print("3次用户名或者密码均有误！退出程序。")
--------------------------------------------------------------------------------------------------
"""
求100以内所有素数之和并输出。 ‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
素数指从大于1，且仅能被1和自己整除的整数。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬

思路：逐一判断100以内每个数是否为素数，然后求和
"""
b=0
for i in range(3,100):
    a=2
    while a < i:
        if i%a != 0:
            a =a+1
        else:
            break
    else:
        b = b+i
print(b+2)
#参考代码
#Prime
def is_prime(n):
    for i in range(2,n):
        if n%i == 0:
            return False
    return True
sum = 0
for i in range(2,100):
    if is_prime(i):#表示if TRUE
        sum += i
print(sum)
#这个代码可复用性强，命名的可读性很强，is_prime,sum
--------------------------------------------------------------------------------------------------
"""
任意累积
描述
请根据编程模板补充代码，计算任意个输入数字的乘积。
"""
def cmul(n,*a):
    s = n
    for i in a:
        s *= i
    return s
print(eval("cmul({})".format(input())))
#以字符串形式调用函数，eval与cmul结合形成了很多多变的形式
--------------------------------------------------------------------------------------------------
# 汉诺塔按步骤输出，递归
steps = 0
def hanoi(src, des, mid, n):
    global steps
    if n == 1:
        steps += 1
        print("[STEP{:>4}] {}->{}".format(steps,src,des))
    else:
        hanoi(src,mid,des,n-1)
        steps += 1
        print("[STEP{:>4}] {}->{}".format(steps,src,des))
        hanoi(mid,des,src,n-1)
N = eval(input())
hanoi("A", "C", "B", N)

--------------------------------------------------------------------------------------------------
"""
连续质数计算
补充编程模板中代码，完成如下功能：‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
获得用户输入数字N，计算并输出从N开始的5个质数，单行输出，质数间用逗号,分割。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
注意：用户输入的数字N可能是浮点数，都是正数；最后一个输出后不用逗号
"""

def prime(m):
    i = 2
    while i < m:
        if m%i !=0:
            i = i+1
        else:
            break
    else:
        return m
n = eval(input("请输入一个数："))
Num = []
a= int(n)+1 if int(n)<n else int(n)
while len(Num) < 5:
    if prime(a) != None:
        Num.append(str(a))
    a += 1
print(",".join(Num))
            
#参考代码
def prime(m):
    for i in range(2,m):
        if m % i == 0:
            return False
    return True

n = eval(input("请输入一个数字："))
n_ = int(n)
n_ = n_+1 if n_ < n else n_
count = 5

while count > 0:
    if prime(n_):
        if count > 1:
            print(n_, end=",")
        else:
            print(n_, end="")
        count -= 1 
    n_ += 1

----------------------------------------------------------------------------------------------------
"""
平方根格式化
获得用户输入的一个整字，a，计算a的平方根，保留小数点后3位，并打印输出。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
输出结果采用宽度30个字符、右对齐输出、多余字符采用加号(+)填充。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
如果结果超过30个字符，则以结果宽度为准。
"""
a = eval(input())
print("{:+>30.3f}".format(pow(a, 0.5)))
#注意：如果平凡根后产生一个复数，由于复数的实部和虚部都是浮点数，.3f可以将实部和虚部分别取三位小数。
----------------------------------------------------------------------------------------------------
"""
字符串分段组合
获得输入的一个字符串s，以字符减号(-)分割s，将其中首尾两段用加号(+)组合后输出。
"""
s = input()
first = s.split("-")[0]
last = s.split("-")[-1]
print(first+'+'+last)

#参考代码
s = input()
ls = s.split("-")
print("{}+{}".format(ls[0], ls[-1]))
#s.split(k)以k为标记分割s，产生一个列表。通过该题目，掌握split()方法的使用，注意：k可以是单字符，也可以是字符串。
#参考代码的可扩展性较好
-----------------------------------------------------------------------------------------------------------
"""
随机密码生成
补充编程模板中代码，完成如下功能：‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
以整数17为随机数种子，获取用户输入整数N为长度，产生3个长度为N位的密码，密码的每位是一个数字。每个密码单独一行输出。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
产生密码采用random.randint()函数。
"""
import random
def genpwd(length):
    a = pow(10,length-1)
    b = pow(10,length)
    c = random.randint(a,b)
    return c
length = eval(input())
random.seed(17)
for i in range(3):
    print(genpwd(length))

#参考代码
import random

def genpwd(length):
    a = 10**(length-1)
    b = 10**length - 1
    return "{}".format(random.randint(a, b))

length = eval(input())
random.seed(17)
for i in range(3):
    print(genpwd(length))
------------------------------------------------------------------------------------------------------
"""
哈姆雷特词频统计
"""
def getText():
    txt = open("hamlet.txt","r").read()
    txt = txt.lower()
    for ch in '''!"#$%&()*+,-./:;<=>?@[\\]^_'{|}~''':
        txt = txt.replace(ch," ")
    return txt
hamletTxt = getText()
words = hamletTxt.split()
counts = {}
for word in words:
    counts[word] = counts.get(word,0)+1
items = list(counts.items())
items.sort(key = lambda x:x[1],reverse=True)
for i in range(10):
    word,count = items[i]
    print("{0:<10}{1:>5}".format(word,count))

------------------------------------------------------------------------------------------------------
#CalThreeKingdomsV1.py
import jieba
txt = open("threekingdoms.txt", "r", encoding="utf-8").read()
words = jieba.lcut(txt)
counts = {}
for word in words:
	if len(word) == 1:
		continue
	else:
		counts[word] = counts.get(word,0) + 1
items = list(counts.items())
items.sort(key=lambda x:x[1], reverse=True)
for i in range(15):
	word, count = items[i]
	print("{0:<10}{1:>5}".format(word, count))


-------------------------------------------------------------------------------------------------------
"""
《沉默的羔羊》之最多单词
附件是《沉默的羔羊》中文版内容，请读入内容，分词后输出长度大于2且最多的单词。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
如果存在多个单词出现频率一致，请输出按照Unicode排序后最大的单词。
"""
import jieba
f = open("沉默的羔羊.txt","r",encoding="utf-8").read()
ls = jieba.lcut(f)
d = {}
for w in ls:
    d[w] = d.get(w, 0) + 1
maxc = 0
maxw = ""
for k in d:
    if d[k] > maxc and len(k) > 2:
        maxc = d[k]
        maxw = k
    if d[k] == maxc and len(k) > 2 and k > maxw:
        maxw = k
print(maxw)

---------------------------------------------------------------------------------------------------------
#CalstatisticsV1奇怪，为什么不会几句计算，会不断的保持输入
def getNum():
    nums = []
    iNumstr = input("请输入数字（回车退出）： ")
    while iNumstr != "":
        nums.append(eval(iNumstr))
        input("请输入数字（回车退出）： ")
    return nums

def mean(numbers):
    s = 0.0
    for num in numbers:
        s += num
    return s / len(numbers)

def dev(numbers,mean):
    sdev = 0.0
    for num in numbers:
        sdev = sdev + (num-mean)**2
    return pow(sdev / (len(numbers)-1),0.5)

def median(numbers):
    sorted(numbers)
    size = len(numbers)
    if size % 2 == 0:
        med = (numbers[size//2-1]+numbers[size//2]) / 2
    else:
        med = (numbers[size//2])
    return med

n = getNum()
m = mean(n)
print("平均值{},方差{.2f},中位数{}".format(m,dev(n,m),median(n)))


#此例举一反三可处理不同方式的从控制台获得的数据
def getNum():       #获取用户不定长度的输入
    numbers = input()
    Num = []
    numbers = numbers.split(",")
    for i in range(len(numbers)):
        Num.append(eval(numbers[i]))
    return Num

参考代码：
def getNum():       #获取用户不定长度的输入
    s = input()
    ls = list(eval(s))
    return ls
"""这是本课程的实例9：

(1) 获取多个数据：从控制台获取逗号分隔的多个数据

(2) 多函数编写方法：模块化设计方法，每部分功能比较清晰

(3) 排序：列表ls的默认排序方法是ls.sort()，如果从大到小排序，用ls.sort(reverse=True)
"""
---------------------------------------------------------------------------------------------------------
"""
字典翻转输出
读入一个字典类型的字符串，反转其中键值对输出。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
即，读入字典key:value模式，输出value:key模式。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
输入格式：用户输入的字典格式的字符串，如果输入不正确，提示：输入错误。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
输出格式‪‬‪‬‪‬‪‬‪‬：‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬给定字典d，按照print(d)方式输出
"""
s = input()
try:
    d = eval(s)
    e = {}
    for k in d:
        e[d[k]] = k
    print(d)
    print(e)
except:
    print("输入错误")

---------------------------------------------------------------------------------------------------------
"""
人名独特性统计
编程模板中给出了一个字符串，其中包含了含有重复的人名，请去重后给出独特性人名的统计。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬输出模板中字符串共有多少个独特人名。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬"""
s = '''双儿 洪七公 赵敏 赵敏 逍遥子 鳌拜 殷天正 金轮法王 乔峰 杨过 洪七公 郭靖 
       杨逍 鳌拜 殷天正 段誉 杨逍 慕容复 阿紫 慕容复 郭芙 乔峰 令狐冲 郭芙 
       金轮法王 小龙女 杨过 慕容复 梅超风 李莫愁 洪七公 张无忌 梅超风 杨逍 
       鳌拜 岳不群 黄药师 黄蓉 段誉 金轮法王 忽必烈 忽必烈 张三丰 乔峰 乔峰 
       阿紫 乔峰 金轮法王 袁冠南 张无忌 郭襄 黄蓉 李莫愁 赵敏 赵敏 郭芙 张三丰 
       乔峰 赵敏 梅超风 双儿 鳌拜 陈家洛 袁冠南 郭芙 郭芙 杨逍 赵敏 金轮法王 
       忽必烈 慕容复 张三丰 杨逍 令狐冲 黄药师 袁冠南 杨逍 完颜洪烈 殷天正 
       李莫愁 阿紫 逍遥子 乔峰 逍遥子 完颜洪烈 郭芙 杨逍 张无忌 杨过 慕容复 
       逍遥子 虚竹 双儿 乔峰 郭芙 黄蓉 李莫愁 陈家洛 杨过 忽必烈 鳌拜 王语嫣 
       洪七公 韦小宝 阿朱 梅超风 段誉 岳灵珊 完颜洪烈 乔峰 段誉 杨过 杨过 慕容复 
       黄蓉 杨过 阿紫 杨逍 张三丰 张三丰 赵敏 张三丰 杨逍 黄蓉 金轮法王 郭襄 
       张三丰 令狐冲 郭芙 韦小宝 黄药师 阿紫 韦小宝 金轮法王 杨逍 令狐冲 阿紫 
       洪七公 袁冠南 双儿 郭靖 鳌拜 谢逊 阿紫 郭襄 梅超风 张无忌 段誉 忽必烈 
       完颜洪烈 双儿 逍遥子 谢逊 完颜洪烈 殷天正 金轮法王 张三丰 双儿 郭襄 阿朱 
       郭襄 双儿 李莫愁 郭襄 忽必烈 金轮法王 张无忌 鳌拜 忽必烈 郭襄 令狐冲 
       谢逊 梅超风 殷天正 段誉 袁冠南 张三丰 王语嫣 阿紫 谢逊 杨过 郭靖 黄蓉 
       双儿 灭绝师太 段誉 张无忌 陈家洛 黄蓉 鳌拜 黄药师 逍遥子 忽必烈 赵敏 
       逍遥子 完颜洪烈 金轮法王 双儿 鳌拜 洪七公 郭芙 郭襄'''
ls = s.split()
ss = set(ls)
print(len(ss))

-----------------------------------------------------------------------------------------------------
"""
人名最多数统计
编程模板中给出了一个字符串，其中包含了含有重复的人名，请直接输出出现最多的人名。
"""
s = '''双儿 洪七公 赵敏 赵敏 逍遥子 鳌拜 殷天正 金轮法王 乔峰 杨过 洪七公 郭靖 
       杨逍 鳌拜 殷天正 段誉 杨逍 慕容复 阿紫 慕容复 郭芙 乔峰 令狐冲 郭芙 
       金轮法王 小龙女 杨过 慕容复 梅超风 李莫愁 洪七公 张无忌 梅超风 杨逍 
       鳌拜 岳不群 黄药师 黄蓉 段誉 金轮法王 忽必烈 忽必烈 张三丰 乔峰 乔峰 
       阿紫 乔峰 金轮法王 袁冠南 张无忌 郭襄 黄蓉 李莫愁 赵敏 赵敏 郭芙 张三丰 
       乔峰 赵敏 梅超风 双儿 鳌拜 陈家洛 袁冠南 郭芙 郭芙 杨逍 赵敏 金轮法王 
       忽必烈 慕容复 张三丰 赵敏 杨逍 令狐冲 黄药师 袁冠南 杨逍 完颜洪烈 殷天正 
       李莫愁 阿紫 逍遥子 乔峰 逍遥子 完颜洪烈 郭芙 杨逍 张无忌 杨过 慕容复 
       逍遥子 虚竹 双儿 乔峰 郭芙 黄蓉 李莫愁 陈家洛 杨过 忽必烈 鳌拜 王语嫣 
       洪七公 韦小宝 阿朱 梅超风 段誉 岳灵珊 完颜洪烈 乔峰 段誉 杨过 杨过 慕容复 
       黄蓉 杨过 阿紫 杨逍 张三丰 张三丰 赵敏 张三丰 杨逍 黄蓉 金轮法王 郭襄 
       张三丰 令狐冲 赵敏 郭芙 韦小宝 黄药师 阿紫 韦小宝 金轮法王 杨逍 令狐冲 阿紫 
       洪七公 袁冠南 双儿 郭靖 鳌拜 谢逊 阿紫 郭襄 梅超风 张无忌 段誉 忽必烈 
       完颜洪烈 双儿 逍遥子 谢逊 完颜洪烈 殷天正 金轮法王 张三丰 双儿 郭襄 阿朱 
       郭襄 双儿 李莫愁 郭襄 忽必烈 金轮法王 张无忌 鳌拜 忽必烈 郭襄 令狐冲 
       谢逊 梅超风 殷天正 段誉 袁冠南 张三丰 王语嫣 阿紫 谢逊 杨过 郭靖 黄蓉 
       双儿 灭绝师太 段誉 张无忌 陈家洛 黄蓉 鳌拜 黄药师 逍遥子 忽必烈 赵敏 
       逍遥子 完颜洪烈 金轮法王 双儿 鳌拜 洪七公 郭芙 郭襄 赵敏'''
ls = s.split()
counts = {}
for word in ls:
    counts[word] = counts.get(word,0)+1
maxc = 0
maxw = ""
for k in counts:
    if counts[k]> maxc:
        maxc = counts[k]
        maxw = k
print(maxw)

#参考代码
ls = s.split()
d = {}
for i in ls:
    d[i] = d.get(i, 0) + 1
max_name, max_cnt = "", 0
for k in d:
    if d[k] > max_cnt:
        max_name, max_cnt = k, d[k]
print(max_name)

--------------------------------------------------------------------------------------
"""数字不同之和
获得用户输入的一个整数N，输出N中所出现不同数字的和。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
例如：用户输入 123123123，其中所出现的不同数字为：1、2、3，这几个数字和为6。
"""
n = input()
ss = set(n)
s = 0
for i in ss:
    s += eval(i)
print(s)

--------------------------------------------------------------------------------------
#GovRptWordCloudv1.py政府工作报告词云
import jieba, wordcloud
f = open("新时代中国特色社会主义.txt","r",encoding = "utf-8")
t = f.read()
f.close
ls = jieba.lcut(t)
txt = " ".join(ls)
w = wordcloud.WordCloud(font_path = "msyh.ttc",width = 1000,height = 700, \
                        background_color = "white")
w.generate(txt)
w.to_file("grwordcloud.png")

--------------------------------------------------------------------------------------
"""
文件行数
打印输出附件文件的有效行数，注意：空行不计算为有效行数。
"""
fo = open("latex.log","r")
print("文件总共{}行".format(len(fo.readlines())))
fo.seek(0)
s = 0
for line in fo:
    line = line.strip("\n")
    if len(line) == 0:
        continue
    s += 1
print("除去空格共{}行".format(s))

--------------------------------------------------------------------------------------
"""
文件字符分布
统计附件文件的小写字母a-z的字符分布，即出现a-z字符的数量，并输出结果。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
同时请输出文件一共包含的字符数量。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
注意输出格式，各元素之间用英文逗号（,）分隔。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
答案可能包含a-z共26个字符的分布，如果某个字符没有出现，则不显示，输出顺序a-z顺序。
输出eg：共999字符,a:11,b:22,c:33,d:44,e:55

我的思路是先按照长字符串统计总的字符个数，再选出a~z之间的字符，用字典功能统计个数，排序后转变成了列表，列表中每个字母及个数是按照元组形式保存的，
这些都是序列类型，可以用排序的方式取出并按格式输出

参考代码的思路是遍历文件中所有的字符，顺便计算了总字符数量；用遍历的方法按顺序选出字母a~z作为键的值，并且按照格式输出
"""
fo = open("latex.log","r")
txt = fo.read()
print("\r共{}字符".format(len(txt)),end=",")
fo.close()
d = {}
for ch in txt:
    if "a" <= ch <= "z":
        d[ch] = d.get(ch,0)+1
    else:
        continue
d_sort = sorted(d.items(),key = lambda d:d[0],reverse = False)
for i in d_sort[0:-1]:
    print(i[0],":",i[1],end =",")
print(d_sort[-1][0],":",d_sort[-1][1])


#参考代码
f = open("latex.log")
cc = 0
d = {}
for i in range(26):#可以先按顺序在字典中排序，其实这个循环可以去掉
    d[chr(ord('a')+i)] = 0
for line in f:
    for c in line:#这两个for循环之后所有的字符都参与的统计
        d[c] = d.get(c, 0) + 1
        cc += 1
print("共{}字符".format(cc), end="")
for i in range(26):#用遍历的方式排序，棒
    if d[chr(ord('a')+i)] != 0:
        print(",{}:{}".format(chr(ord('a')+i), d[chr(ord('a')+i)]), end="")
#使用 ord('a')+i 配合 range()函数 可以遍历一个连续的字符表

-----------------------------------------------------------------------------------------
"""
统计附件文件中与其他任何其他行都不同的行的数量，即独特行的数量。
我一开始也想到了用集合来选出所有出现过的元素，但是没有继续想下去，参考代码的效率更高，用ls.remove()可以去掉某一个元素，如果该行是独特行，
去掉该元素后将不在集合t中出现。

我的代码使用常规的方法，先把每一行的内容作为键来统计数量，然后把数量为1的算入独特行

"""
f = open("latex.log")
ls = f.readlines()
count={}
for c in ls:
    count[c] = count.get(c,0)+1
s = 0
for k in count:
    if count[k] == 1:
        s += 1
print("共{}独特行".format(s))


#参考代码
f = open("latex.log")
ls = f.readlines()
s = set(ls)
for i in s:
    ls.remove(i)
t = set(ls)
print("共{}独特行".format(len(s)-len(t)))#用2个集合的差就算出了独特行
-----------------------------------------------------------------------------------------
"""
附件是一个CSV文件，请将每行按照列逆序排列后输出，不改变各元素格式（如周围空格布局等）
"""
f = open("data.csv")
for row in f:
    row = row.strip("\n")
    print(row[::-1])


#参考代码
f = open("data.csv")
for line in f:
    line = line.strip("\n")
    ls = line.split(",")#以，为标志将这一样的内容转变为列表
    ls = ls[::-1]
    print(",".join(ls))#用.join方法以，连接生成新的字符串
f.close()

-----------------------------------------------------------------------------------------
"""
附件是一个CSV文件，其中每个数据前后存在空格，请对其进行清洗，要求如下：‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
（1）去掉每个数据前后空格，即数据之间仅用逗号(,)分割；‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
（2）清洗后打印输出。
"""
f = open("data.csv")
for line in f:
    line = line.strip("\n")
    ls = line.split(",")
    for a in ls:
        a = a.replace(" ","")
    print(line)
#这样改根本就没有用，只改动了每个元素，但是输出的还是老的值

f = open("data.csv")
s = f.read()
s = s.replace(" ","")
print(s)
f.close()

-----------------------------------------------------------------------------------------------
"""
CVS格式清洗与换行
附件是一个CSV格式文件，提取数据进行如下格式转换：‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
（1）按行进行倒序排列；‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
（2）每行数据倒序排列；‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
（3）使用分号（;）代替逗号（,）分割数据，无空格；‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
按照上述要求转换后将数据输出。 
"""
f = open("data.csv")
ls = []
for line in f:
    line = line.strip("\n")
    ls.append(line.split(","))#生成二维数组
print(ls)
for item in ls[::-1]:#逆序大行每个item是一个一维列表
    ch = ';'.join(item)#每个列表转换为字符串，同时用分号分隔
    ch = ch.replace(" ", "")#对字符串操作清除空格
    print(ch[::-1])
f.close()


#参考代码
f = open("data.csv")
ls = f.readlines()#一次性读入，生成一个一维列表，其中每个元素是csv中的一行含有\n的字符串
print(ls)
ls = ls[::-1]#逆序大行
lt = []
for item in ls:#接下来都是对字符串的操作，所以很干净
    item = item.strip("\n")
    item = item.replace(" ", "")
    lt = item.split(",")#这两行用列表和字符串的转换把逗号换成分号
    lt = lt[::-1]
    print(";".join(lt))
f.close()
-----------------------------------------------------------------------------------------------
"""
文本的平均列数
打印输出附件文件的平均列数，计算方法如下：‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
（1）有效行指包含至少一个字符的行，不计算空行；‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
（2）每行的列数为其有效字符数；‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
（3）平均列数为有效行的列数平均值，采用四舍五入方式取整数进位。
"""
f = open("latex.log")
sline = 0
sch = 0
for line in f:
    line = line.strip("\n")
    if line != "":
        sline += 1
        sch += len(line)
print(round(sch/sline))
f.close()

#以下为参考代码
f = open("latex.log")
s, c = 0, 0
for line in f:
    line = line.strip("\n")
    if line == "":
        continue
    s += len(line)
    c += 1
print(round(s/c))

-----------------------------------------------------------------------------------------------
"""
获得用户的任何可能输入，将其中的英文字符进行打印输出，程序不出现错误。
"""
ch = input()
for i in ch:
    if "a"<= i <= "z" or "A"<= i <="Z":
        print(i,end = "")

#参考代码
alpha = []
for i in range(26):
    alpha.append(chr(ord('a') + i))
    alpha.append(chr(ord('A') + i))
s = input()
for c in s:
    if c in alpha:
        print(c, end="")
-----------------------------------------------------------------------------------------------
"""
获得用户输入的一个数字，可能是浮点数或复数，如果是整数仅接收十进制形式，且只能是数字。
对输入数字进行平方运算，输出结果。
1+2j          -3+4j
123           15129
123.456       15241.383936
100+20       输入有误
100**2       输入有误
0x123        输入有误
"""

num = input()
try:
    if isinstance(eval(num), complex):
        print(pow(eval(num),2))
    elif num == str(eval(num):)
        print(pow(eval(num),2))
    else:
        print("输入有误")
except:
    print("输入有误")    
    
s = input()
print(complex(s),complex(eval(s)))
try:
    if complex(s) == complex(eval(s)):
        print(eval(s)**2)
except:
    print("输入有误")

"""
complex()和complex(eval())之间的比较将能够排除非数字类型的输入。
注意：不能直接使用eval()，否则，用户可以通过输入表达式（如100**2）输入数字，
与要求不同（在实际应用中带来安全隐患）。
"""
-----------------------------------------------------------------------------------------------
#桃心绘制
import turtle as t
t.penup()
t.seth(-90)
t.fd(160)
t.pendown()
t.pensize(20)
t.colormode(255)
for j in range(10):
    t.speed(1000)
    t.pencolor(25*j,5*j,15*j)
    t.seth(130)
    t.fd(220)
    for i in range(23):
        t.circle(-80,10)
    t.seth(100)
    for i in range (23):
        t.circle(-80,10)
    t.fd(220)
t.done()
-----------------------------------------------------------------------------------------------

"""
tabulate能够对二维数据进行表格输出，是Python优秀的第三方计算生态。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
参考编程模板中给定的数据和代码，编写程序，能够输出如下风格效果的表格数据。
"""
from tabulate import tabulate
data = [ ["北京理工大学", "985", 2000], \
         ["清华大学", "985", 3000], \
         ["大连理工大学", "985", 4000], \
         ["深圳大学", "211", 2000], \
         ["沈阳大学", "省本", 2000], \
    ]
print(tabulate(data, tablefmt='grid'))
-----------------------------------------------------------------------------------------------
"""
获取系统的递归深度、当前执行文件路径、系统最大UNICODE编码值等3个信息，并打印输出。‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
输出格式如下：‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
RECLIMIT:<深度>, EXEPATH:<文件路径>, UNICODE:<最大编码值>‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬
提示：请在sys标准库中寻找上述功能。

这里仅是格式参考，非正确答案，请注意，输出中每个逗号（,）后面都有一个空格。
RECLIMIT:500, EXEPATH:/bin/python, UNICODE:1411
"""
import sys
reclimit = sys.getrecursionlimit()
print("RECLIMIT:{}".format(reclimit),end = ", ")
path = sys.path
print("EXEPATH:{}".format(path),end = ", ")
maxunicode = sys.maxunicode
print("UNICODE:{}".format(maxunicode))

#参考代码
print("RECLIMIT:{}, EXEPATH:{}, UNICODE:{}".format(sys.getrecursionlimit(), sys.executable, sys.maxunicode))
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
